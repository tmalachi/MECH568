% MECH 568 HW #4 Problem 9.4
% Author: Thomas Andreano
% 11/26/2019
%--------------------------------------------------------------------------
%
% Solves the following equation using 2nd order differences
%
%               d2u/dx2 - 6x = 0
%
% Domain: 0 <= x <= 1
% Boundary conditions: u(0) = 0, u(1) = 1
% Initial condition: u(x) = 0
% Grid size: M = 39
%
% Point Jacobi, Gauss-Seidel, SOR w/ optimum value of omega, and the
% 3-step Richardson methiod are used.
%--------------------------------------------------------------------------

clear all;
close all;
clc;

nodes = 39;
dom = linspace(0, 1, nodes)';
deltaX = (dom(end) - dom(1))/(nodes);

bc = zeros(nodes,1);
bc(end) = 1;
g = 6*dom;

%create A matrix for approximation: u' = A*u
A_col_vec = zeros(nodes,1);
A_col_vec(1) = -2;
A_col_vec(2) = 1;
A_row_vec = zeros(1,nodes);
A_row_vec(1) = -2;
A_row_vec(2) = 1;
A = (toeplitz(A_col_vec, A_row_vec));

I = eye(nodes);
f = deltaX^2*g - bc;

tol = 1e-6;


%% Point Jacobi
%--------------------------------------------------------------------------
H_PJ = -diag(diag(A));
u_PJ = zeros(nodes, 1);

convPJ_th = max(eig(I + H_PJ\A));

r = inf;
count = 0;
save_count = 1;
while r > tol
   
    u_PJ = (I + H_PJ\A)*u_PJ - H_PJ\f;
   
    if count > 0
        r_old = r;
        r_new = max(abs(A*u_PJ - f));

        if r_new < r_set/10^(save_count)
            u_save(:,:,save_count) = u_PJ;
            save_count = save_count + 1;
        end
       
         r = r_new;
    else
        r_set = max(abs(A*u_PJ - f));
        r = r_set;
    end
   
    L2_PJ(count+1) = vecnorm(r,2);
    count = count + 1;
   
end

dom_final = linspace(0, 1, nodes+1);
u_PJ(end + 1) = 1;
u_PJ_1 = u_save(:,:,2);
u_PJ_1(end + 1) = 1;
u_PJ_2 = u_save(:,:,3);
u_PJ_2(end + 1) = 1;
u_PJ_3 = u_save(:,:,4);
u_PJ_3(end + 1) = 1;

figure(1)
plot(dom_final,u_PJ_1, dom_final, u_PJ_2, dom_final, u_PJ_3,...
    dom_final, u_PJ, '--')
title('Point Jacobi Method')
legend('Solution after 100x residual decrease',...
    'Solution after 1000x residual decrease',...
    'Solution after 10000x residual decrease', 'Final solution')

iters = linspace(1, count, count);
figure(2)
plot(iters, log(L2_PJ))
title('L2 Norm of Residual for Point Jacobi')

% %% Gauss Seidel
% %--------------------------------------------------------------------------

H_GS = -(tril(A));
u_GS = zeros(nodes, 1);
convGS_th = max(eig(I + H_GS\A));

r = inf;
count = 0;
save_count = 1;

while r > tol
   
    u_GS = (I + H_GS\A)*u_GS - H_GS\f;

    if count > 0
        r_old = r;
        r_new = max(abs(A*u_GS - f));

        if r_new < r_set/10^(save_count)
            u_save(:,:,save_count) = u_GS;
            save_count = save_count + 1;
        end

        r = r_new;
    else
        r_set = max(abs(A*u_GS - f));
        r = r_set;
    end
   
    L2_GS(count+1) = vecnorm(r,2);
    count = count + 1;

end

u_GS(end + 1) = 1;
u_GS_1 = u_save(:,:,2);
u_GS_1(end + 1) = 1;
u_GS_2 = u_save(:,:,3);
u_GS_2(end + 1) = 1;
u_GS_3 = u_save(:,:,4);
u_GS_3(end + 1) = 1;

figure(3)
plot(dom_final,u_GS_1, dom_final, u_GS_2, dom_final, u_GS_3,...
    dom_final, u_GS, '--')
title('Gauss Seidel Method')
legend('Solution after 100x residual decrease',...
    'Solution after 1000x residual decrease',...
    'Solution after 10000x residual decrease', 'Final solution')

figure(4)
plot(linspace(1, count, count), log(L2_GS))
title('L2 Norm of Residual for Gauss Seidel')

% %% SOR
% %--------------------------------------------------------------------------
H_SOR = -(tril(A)) + diag(diag(A)) + (1 + sin(pi/nodes + 1))*I;
u_SOR = zeros(nodes, 1);
convSOR_th = max(eig(I + H_SOR\A));

r = inf;
count = 0;
save_count = 1;

while r > tol
   
    u_SOR = (I + H_SOR\A)*u_SOR - H_SOR\f;

    if count > 0
        r_old = r;
        r_new = max(abs(A*u_SOR - f));

        if r_new < r_set/10^(save_count)
            u_save(:,:,save_count) = u_SOR;
            save_count = save_count + 1;
        end

        r = r_new;
    else
        r_set = max(abs(A*u_SOR - f));
        r = r_set;
    end
   
    L2_SOR(count+1) = vecnorm(r,2);
    count = count + 1;

end

u_SOR(end + 1) = 1;
u_SOR_1 = u_save(:,:,2);
u_SOR_1(end + 1) = 1;
u_SOR_2 = u_save(:,:,3);
u_SOR_2(end + 1) = 1;
u_SOR_3 = u_save(:,:,4);
u_SOR_3(end + 1) = 1;

figure(5)
plot(dom_final,u_SOR_1, dom_final, u_SOR_2, dom_final, u_SOR_3,...
    dom_final, u_SOR, '--')
title('Optimum SOR Method')
legend('Solution after 100x residual decrease',...
    'Solution after 1000x residual decrease',...
    'Solution after 10000x residual decrease', 'Final solution')

figure(6)
plot(linspace(1, count, count), log(L2_SOR))
title('L2 Norm of residual for Optimum SOR')


%% 3-step Richardson
%--------------------------------------------------------------------------
H_R = -diag(diag(A));
u_R = zeros(nodes, 1);
N = 3;

for n = 1:3
    h(n) = 1/(.5*(-min(eig(A)) - max(eig(A)) + (min(eig(A)) - ...
        max(eig(A)))*cos((2*n - 1)*pi/(2*N))));
end

r = inf;
count = 0;
save_count = 1;
while r > tol
   
    for i = 1:3
        u_R = (I + h(i)*(H_R\A))*u_R - h(i)*(H_R\f);
    end
   
    if count > 0
        r_old = r;
        r_new = max(abs(A*u_R - f));

        if r_new < r_set/10^(save_count)
            u_save(:,:,save_count) = u_R;
            save_count = save_count + 1;
        end
       
         r = r_new;
    else
        r_set = max(abs(A*u_R - f));
        r = r_set;
    end
   
    L2_R(count+1) = vecnorm(r,2);
    count = count + 1;

end

u_R(end + 1) = 1;
u_R_1 = u_save(:,:,2);
u_R_1(end + 1) = 1;
u_R_2 = u_save(:,:,3);
u_R_2(end + 1) = 1;
u_R_3 = u_save(:,:,4);
u_R_3(end + 1) = 1;

figure(7)
plot(dom_final,u_R_1, dom_final, u_R_2, dom_final, u_R_3,...
    dom_final, u_R, '--')
title('Richardson Method')
legend('Solution after 100x residual decrease',...
    'Solution after 1000x residual decrease',...
    'Solution after 10000x residual decrease', 'Final solution')

figure(8)
plot(linspace(1, count, count), log(L2_R))
title('L2 Norm of Residual for Richardson Method')
